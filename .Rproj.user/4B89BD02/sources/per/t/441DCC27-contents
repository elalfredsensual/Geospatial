#### Cargar Librerias
pacman::p_load(rgdal, rgeos, raster, spatstat, spdep, leaflet, spatialreg, tidyverse, vapour, gstat)

crs_utm <-  vapour_srs_wkt("+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
crs_ll <- vapour_srs_wkt("+proj=longlat +datum=WGS84 +no_defs")

# cargar datos
violencia <- read_rds("data/casos_violencia.rds")  %>%  
  SpatialPointsDataFrame(coords = .[,c("x","y")], 
                                   proj4string = CRS(crs_utm)) %>% 
  st_as_sf() 

#### Cargar Poligonos de Manzanas de Las Condes (Censo 2012)
#### Cargar datos censales de nivel educativo en Las Condes a nivel de personas

censo_lc <- readRDS("data/censo_lc.rds") %>% 
  mutate(poblacion = 1,
         CODINE011 = as.character(IDMZ)) %>% 
  select(-IDMZ)

## Calcular poblacion por manzana
poblacion <- 
  censo_lc %>% 
  group_by(CODINE011) %>% 
  summarise(poblacion = sum(poblacion)) 

## Calcular Nivel Educacional de jefes de hogar por manzana
nived <- censo_lc %>% 
  filter(DSOST==1) %>%  # Filtar sostenedores
  group_by(CODINE011) %>% 
  summarise(EDUC = mean(EDUC))

## Imputar datos de nivel educacional a manzanas Las Condes
mz_lc <- readRDS("data/manzanas_lc.rds") %>% 
  st_as_sf() %>% 
  left_join(poblacion, by = "CODINE011") %>% 
  left_join(nived, by = "CODINE011")

### Calculo de Hotspots de Violencia

# Crear ventana de calculo
# ext <- extent(violencia)
# x_min <- ext[1] - 100
# x_max <- ext[2] + 100
# y_min <- ext[3] - 100
# y_max <- ext[4] + 100
# w <- as.owin(c(x_min,x_max, y_min, y_max)) # ventana que define espacio de trabajo

# base de puntos
#pts <- coordinates(violencia$geometry)

pts <- violencia$geometry %>% unlist() %>% matrix(nrow=2) %>% t()
# p <- ppp(pts[,1], pts[,2], window = w)

# *************************
# ponderacion por distancia ----


# *************************
# kernel density ----

# Calculo de Hotspots con radios mas y menos extensos de agregacion (adjust*bandwidth)

del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1500, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.06')


del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')

# ************
# kriging ----

mz_point <- st_centroid(mz_lc) %>% 
  drop_na()


formMod <- EDUC ~ 1

mod <- vgm(model  = "Exp", nugget = 0.5)
variog <- variogram(formMod, mz_point)

# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)

plot(variogFitOLS, cutoff = 4300)
plot(variog, add = T)

# Prediccion tipo Kriging
modelo_krige <- krige(formula = formMod ,
                locations = mz_point, 
                model = variogFitOLS,
                newdata = mz_point,
                debug.level = 0)

plot(modelo_krige)

# ****************
# regresiones ----

plot(mz_point)


modviol <- lm(violencia~log(densidad)+EDUC,data=lc_p@data)
summary(modviol)


## Visualizar
plot(violencia, main = "Delitos violentos en la comuna de Las Condes", col ="red")



### Indice de Moran: Analisis de autocorrelacion espacial de nivel de estudios en manzanas de Las Condes


# Transformacion las manzanas de Las Condes de Poligonos a puntos 
lc_p = SpatialPointsDataFrame(mz_lc, data = mz_lc@data, proj4string = (crs_utm))

## Eliminar NAs de Educacion 
lc_p = lc_p[!is.na(lc_p$EDUC), ]
mz_point

#### Generar matriz de pesos espaciales

## crear variable id identica a numero de filas
rownames(lc_p@data) = lc_p$id = 1:nrow(lc_p)

## Numero de vecinos
nvec=12

## Crear matriz de pesos espciales (cambios de formatos para calcular morgan)
nb <- nb2listw(neighbours = knn2nb(
  knn = knearneigh( x = mz_point, k = nvec)), 
  style = "W")



plot(mz_point)
plot(nb,coords= mz_point,add=T, col = "grey50")

## Asignar pesos por poblacion de cada manzana
nb$weights = lapply(1:nrow(mz_point), function(i)
  mz_point$pob[mz_point$id %in% nb$neighbours[[i]]] / 
    sum(mz_point$pob[mz_point$id %in% nb$neighbours[[i]]]))


#### Diagnostico y calculo de Autocorrelacion Espacial

## Test de Moran de autocorrelacion global
spdep::moran.test(x = st_drop_geometry(mz_point)$EDUC,  listw = nb)
moran.plot(x = mz_point$EDUC,  listw = nb, labels=as.character(mz_point$id))

# Calcular Local Moran
lmoran = localmoran(lc_p$EDUC, nb)

lc_p$EDUCs = as.numeric(scale(lc_p$EDUC))
lc_p$lag_s_EDUC = lag.listw(nb, lc_p$EDUCs)
lc_p@data = cbind(lc_p@data, lmoran = as.data.frame(lmoran)[, 5])

# Umbral de significancia estadistica
pval=0.05

# Definir cuadrantes
lc_p[(lc_p$EDUCs >= 0 & lc_p$lag_s_EDUC >= 0) & (lc_p$lmoran <= pval), "clusterM"] = "HH" # plot
lc_p[(lc_p$EDUCs <= 0 & lc_p$lag_s_EDUC <= 0) & (lc_p$lmoran <= pval), "clusterM"] = "LL" # plot
lc_p[(lc_p$EDUCs >= 0 & lc_p$lag_s_EDUC <= 0) & (lc_p$lmoran <= pval), "clusterM"] = "HL"
lc_p[(lc_p$EDUCs <= 0 & lc_p$lag_s_EDUC >= 0) & (lc_p$lmoran <= pval), "clusterM"] = "LH"
lc_p[(lmoran[, 5] > 0.05), "clusterM"] = "NS"
table(lc_p$clusterM)

## Imputar informacion de puntos a manzanas
mz_lc = sp::merge(mz_lc, lc_p@data[, c("CODINE011", "clusterM")], by = "CODINE011")



### Visualizacion de Autocorrelacion de Educacion y Hotspots de Delitos Violentos


# Generacion de raster espacial desde hotpots
hot_violencia <- raster(del_hotspots_1, crs = (crs_utm))

# reproyectar raster
hot_violencia <- projectRaster(hot_violencia, crs = (crs_ll))
values(hot_violencia)=values(hot_violencia)*10000

# paleta de colores
palviol <- colorNumeric(c("white", "yellow","red","brown","black"), values(hot_violencia),
  na.color = "transparent")

## Reproyectar manzanas de Las Condes
mz_lc = spTransform(mz_lc, CRS(crs_ll))

## Filtar los poligonos HH y LL
HH_LL = subset(mz_lc, clusterM == "HH" | clusterM == "LL")
palseg = colorFactor(palette = c("blue","green"), domain = HH_LL$clusterM)


#### Leaflet


leaflet(data = HH_LL) %>%
  ## mapas de fondo
  addTiles(group = "OSM (default)") %>%  
  addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
  addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "Satellite")%>%
  ## Capas informacion
  addPolygons(
    color = ~palseg(clusterM),
    stroke = FALSE,
    fillOpacity = 0.4,
    group = "Segregacion")%>% 
  addRasterImage(hot_violencia, colors = palviol, opacity = 0.7, group = "Violencia") %>%
  ## Leyendas
  addLegend("bottomleft", pal = palseg, values = ~clusterM,
    title = "Segregacion", opacity = 0.7)%>%
  addLegend("bottomright", pal = palviol, values = values(hot_violencia),
    title = "Volencia", opacity = 0.4)%>%
  ## Controles
  addLayersControl(
    baseGroups = c("Toner Lite", "OSM (default)", "Toner", "Satellite"),
    overlayGroups = c("Segregacion", "Violencia"),
    options = layersControlOptions(collapsed = TRUE))


### Calcular Area y densidad de manzanas


## Reproyectar para calcular area en metros
mz_lc = spTransform(mz_lc, CRS(crs_utm))

## Calculo area en hectareas
mz_lc@data$area=gArea(mz_lc,byid=T)/10000
mz_lc@data$densidad=mz_lc@data$poblacion/mz_lc@data$area


### Extraer datos de raster a puntos y densidad desde poligonos


## Datos desde raster
lc_p@data$violencia=extract(hot_violencia,lc_p)

## Datos desde poligonos
lc_p=sp::merge(lc_p,mz_lc@data[,c("CODINE011","densidad")],by="CODINE011")

summary(lc_p@data)



### Modelos de regresion para violencia

#Diagnosticos de variable dependiente

## ver distribucion de variable dependiente y explicativas
hist(lc_p$violencia, breaks=100)
hist(lc_p$EDUC, breaks=100)
hist(lc_p$densidad, breaks=100)
hist(log(lc_p$densidad), breaks=100)

## Test de Moran
moran.test(lc_p$violencia,listw=nb)



#### Modelo OLS 


#### Diagnosticos de autocorrelacion


## Test Moran residuos
lm.morantest(modviol,nb,alternative="greater")

## Tipo de dependencia
lm.LMtests(modviol,nb,test="all")


### Modelos de regresion espacial

#Error espacial
## SDEM Spatial Durbin Error Model
fit.errdurb=errorsarlm(violencia~log(densidad)+EDUC,data=lc_p@data,listw=nb,etype="error",method="eigen")
summary(fit.errdurb, Nagelkerke=T)
## Test Moran residuos
res.err=fit.errdurb$residuals
moran.test(res.err,nb)


#Lag espacial
## SDM Spatial Durbin Lag Model
fit.durb=lagsarlm(violencia~log(densidad)+EDUC,data=lc_p@data,listw=nb,type="lag",method="eigen") 
summary(fit.durb, Nagelkerke=T)
## Test Moran residuos
res.lag=fit.durb$residuals
moran.test(res.lag,nb)


#Error y Lag espacial

## SAC Spatial Autocorrelation Model
fit.sac=sacsarlm(violencia~log(densidad)+EDUC,data=lc_p@data,listw=nb,type="sac",method="eigen")
summary(fit.sac, Nagelkerke=T)
## Test Moran residuos
res.sac=fit.sac$residuals
moran.test(res.sac,nb)






