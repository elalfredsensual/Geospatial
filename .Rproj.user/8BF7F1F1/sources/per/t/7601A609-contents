# load shapefile for bavaria
bavaria <- read_sf("bavaria.shp")
# load raster file for europe
europe_raster <- raster("elevation1x1_new.tif")
# load shapefile for world
world_shape <- read_sf("ne_50m_admin_0_countries.shp")
# keep only europe
europe_shape <- world_shape[world_shape$CONTINENT == "Europe",]
# use world.cities from the maps package
# keep only cities with at least 1 million inhabitants
cities <- world.cities[world.cities$pop >= 1000000, ]
# turn it into an sf object
cities <- cities %>%
  st_as_sf(coords = c("long", "lat"), crs = 4326) %>%
  st_cast("POINT")
# keep only the cities that are in europe
cities <- st_intersection(cities, st_union(europe_shape))
# turn the europe object into a MULTILINESTRING
europe_shape <- st_cast(europe_shape, "MULTILINESTRING")
communities <- read_sf("gmd_ex.shp")
# keep only the ones in rosenheim
rosenheim <- communities[communities$BEZ_KRS == "Rosenheim", ]
# load the csv file for honey production in the us
honey_csv <- read_csv("honeyproduction.csv")
# load the xlsx file for abbreviations of the us states
abbrev <- read_xlsx("abbrev.xlsx")
# load honey shapefile
honey_sf <- read_sf("honey.shp")
##############


tmap_mode("view")
tm_shape(bavaria) + tm_polygons(col = "pop_development", midpoint = 0)

tm_shape(bavaria) +
  tm_polygons(col = "pop_development", midpoint = 0) +
  tm_basemap("Stamen.Watercolor")

tm_shape(bavaria) +
  tm_polygons(col = "unemployment_rate") +
  tm_facets(by = "Art")

accidents <- read_csv("datasets/chapter_2/accidents.csv")
accidents <- accidents %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_cast("POINT")

map_london <- tm_shape(accidents) +
  tm_dots(
    group = "2017",
    col = "Light_Conditions",
    palette = "Dark2",
    popup.vars = TRUE
  ) 

map_london <- tm_shape(accidents) +
  tm_dots(
    group = "2017",
    col = "Light_Conditions",
    palette = "Dark2",
    popup.vars = TRUE
  ) +
  tm_view(
    alpha = 1,
    basemaps = "Esri.WorldTopoMap"
  )
map_london


library(sf)
# for plotting
library(lattice)
library(leafpop)
library(mapview)
library(vapoRwave)
library(viridis)

bavaria <- read_sf("bavaria.shp")
mapview(bavaria)

mapview(bavaria, zcol = "unemployment_rate")

pal <- magma(n = length(unique(bavaria$employment_rate)), direction = -1)
mapview(bavaria, zcol = "unemployment_rate", col.regions = pal)


mapview(bavaria, zcol = "unemployment_rate", col.regions = jazzCup_pal(), at = c(0, 2, 4, 6, 8))

mapview(europe_raster, legend = FALSE) +
  mapview(europe_shape, legend = FALSE, alpha.regions = 0) +
  mapview(cities, legend = FALSE, cex = "pop")

mapview(europe_raster, legend = FALSE) +
  mapview(europe_shape, legend = FALSE, alpha.regions = 0) +
  mapview(cities, legend = FALSE, cex = "pop")


mapview(
  bavaria,
  zcol = "admin_district",
  col.regions = brewer.pal(7, "Dark2"),
  popup = popupTable(
    bavaria,
    zcol = c(
      "unemployment_rate",
      "household_income",
      "pop_density"
    )
  )
)

# mapdeck
# for loading our data
library(sf)
# for datasets
library(nycflights13)
# for plotting
library(mapdeck)
library(RColorBrewer)
# for data wrangling
library(dplyr)

roads_hamburg <- read_sf("hamburg.shp")
bakeries <- read_sf("bakeries.kml")
# count the number of flights from each origin to each destination
flights_grouped <- flights %>%
  count(dest, origin)
colnames(airports)[1] <- "dest"
# join the flight data with the coordinates of the destination airports
flights_grouped <- flights_grouped %>%
  right_join(airports[, c(1, 3:4)])
colnames(flights_grouped)[4:5] <- c("lat_dest", "lon_dest")
colnames(airports)[1] <- "origin"
# join the flight data with the coordinates of the origin airports
flights_grouped <- flights_grouped %>%
  right_join(airports[, c(1, 3:4)])
colnames(flights_grouped)[6:7] <- c("lat_origin", "lon_origin")
# remove NAs
flights_grouped <- flights_grouped[!is.na(flights_grouped$dest), ]

ms <- mapdeck_style("satellite")
mapdeck(data = flights_grouped, style = ms, pitch = 30, token = token) %>%
  add_arc(
    # coordinates of origin airports
    origin = c("lon_origin", "lat_origin"),
    # coordinates of destination airports
    destination = c("lon_dest", "lat_dest"),
    # color our strokes depending on the number of flights
    stroke_from = "n",
    stroke_to = "n",
    palette = "viridis",
    legend = TRUE
  ) %>%
  # set the view
  mapdeck_view(
    location = c(-110, 48),
    # set the zoom level
    zoom = 2,
    # set the pitch angle
    pitch = 45,
  )

ms <- mapdeck_style("light")
mapdeck(style = ms, token = token) %>%
  add_line(
    data = flights_grouped,
    origin = c("lon_origin", "lat_origin"),
    destination = c("lon_dest", "lat_dest"),
    stroke_colour = "n",
    stroke_width = 2,
    palette = "plasma",
    legend = TRUE
  ) %>%
  mapdeck_view(
    location = c(-110, 48),
    zoom = 2,
    pitch = 45
  )


ms <- mapdeck_style("outdoors")
mapdeck(style = ms, token = token) %>%
  add_animated_arc(
    data = flights_grouped,
    origin = c("lon_origin", "lat_origin"),
    destination = c("lon_dest", "lat_dest"),
    stroke_from = "n",
    stroke_to = "n",
    stroke_width = 3,
    # set the length of the trails
    trail_length = 10,
    palette = "magenta2green",
    legend = TRUE
  ) %>%
  mapdeck_view(
    location = c(-110, 48),
    zoom = 2,
    pitch = 45
  )


ms <- mapdeck_style("dark")
mapdeck(style = ms, token = token) %>%
  add_animated_line(
    data = flights_grouped,
    origin = c("lon_origin", "lat_origin"),
    destination = c("lon_dest", "lat_dest"),
    stroke_colour = "n",
    stroke_width = 2,
    # set the speed of the animation
    animation_speed = 10,
    palette = "viridis",
    legend = TRUE
  ) %>%
  mapdeck_view(
    location = c(-110, 48),
    zoom = 2,
    pitch = 45
  )


mapdeck(token = token) %>%
  add_path(
    data = roads_hamburg,
    stroke_colour = "#404040"
  ) %>%
  mapdeck_view(
    location = c(10, 53.6),
    zoom = 8
  )

mapdeck(style = ms, token = token) %>%
  add_path(
    data = roads_hamburg,
    stroke_colour = "type",
    stroke_width = 2,
    legend = TRUE,
    palette = colorRamp(c("#FFB17A", "#B967FF", "#05FFA1"))( (1:256)/256 )
  ) %>%
  mapdeck_view(
    location = c(10, 53.6),
    zoom = 8
  )

mapdeck(style = ms, token = token) %>%
  add_grid(
    data = bakeries,
    # size of each cell in meters
    cell_size = 1000,
    # multiplier for the elevation of the cells
    elevation_scale = 75,
    colour_range = brewer.pal(6, "YlOrRd")
  ) %>%
  mapdeck_view(
    location = c(10, 48),
    zoom = 3,
    pitch = 45,
  )

## leaflet
# for loading our data
library(readr)
library(sf)
# for plotting
library(leaflet)
library(leaflet.extras)
# for more stuff
library(dbscan)
library(dplyr)
library(openrouteservice)
library(geosphere)
library(magrittr)

pharmacies <- read_sf("pharmacies.shp")
streets <- read_sf("streets.shp")

basemap <- leaflet() %>%
  # add different provider tiles
  addProviderTiles(
    "OpenStreetMap",
    # give the layer a name
    group = "OpenStreetMap"
  ) %>%
  addProviderTiles(
    "Stamen.Toner",
    group = "Stamen.Toner"
  ) %>%
  addProviderTiles(
    "Stamen.Terrain",
    group = "Stamen.Terrain"
  ) %>%
  addProviderTiles(
    "Esri.WorldStreetMap",
    group = "Esri.WorldStreetMap"
  ) %>%
  addProviderTiles(
    "Wikimedia",
    group = "Wikimedia"
  ) %>%
  addProviderTiles(
    "CartoDB.Positron",
    group = "CartoDB.Positron"
  ) %>%
  addProviderTiles(
    "Esri.WorldImagery",
    group = "Esri.WorldImagery"
  ) %>%
  # add a layers control
  addLayersControl(
    baseGroups = c(
      "OpenStreetMap", "Stamen.Toner",
      "Stamen.Terrain", "Esri.WorldStreetMap",
      "Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
    ),
    # position it on the topleft
    position = "topleft"
  )

icon.fa <- makeAwesomeIcon(
  icon = "flag", markerColor = "red",
  library = "fa",
  iconColor = "black"
)

map_1 <- basemap %>%
  addAwesomeMarkers(
    lat = 48.1,
    lng = 11.5,
    label = "Starting point",
    icon = icon.fa
  )

map_1

drivetime <- ors_isochrones(
  # set the starting point
  locations = c(11.5, 48.1),
  # use a cycling profile
  profile = "cycling-regular",
  # 20 minutes drivetime
  range = 1200,
  # return a sf object
  output = "sf",
  # token
  api_key = token
)

# get the pharmacies within the 20 minutes drivetime
pharmacies_inter <- st_intersection(drivetime, pharmacies)

pharmacies_inter$distance <- distHaversine(st_coordinates(pharmacies_inter), c(11.5, 48.1))
map_2 <- map_1 %>%
  addPolygons(
    data = drivetime,
    # set the color of the polygon
    color = "#E84A5F",
    # set the opacity of the outline
    opacity = 1,
    # set the stroke width in pixels
    weight = 1,
    # set the fill opacity
    fillOpacity = 0.6
  )

map_3 <- map_2 %>%
  # add pharmacies
  addMarkers(
    data = pharmacies_inter,
    # create custom labels
    label = paste(
      "Name: ", pharmacies_inter$name, "<br>",
      "Distance from location: ",
      round(pharmacies_inter$distance, 1), " meters", "<br>",
      "Street: ", pharmacies_inter$addr_st
    ) %>%
      lapply(htmltools::HTML)
  ) %>%
  # add a legend
  addLegend(
    colors = "#E84A5F",
    labels = "0 - 20 minutes",
    title = "Drivetime",
    opacity = 1, 
    position = "bottomleft"
  )

map_3



