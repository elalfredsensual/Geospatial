geom_path(data=data, col="yellow", aes(lng,lat), size = 2)
purrr::map_dfr(curvas_nivel$level, curvas_nivel$geometry)
coordinates(curvas_nivel$geometry)
### transformo spatiallines a dataframe
# para cada nivel de la curva identifico todos los puntos que construyen esa linea
puntos_contorno <- do.call(rbind, lapply(curvas_nivel$level,
function (y) do.call(rbind,lapply(
coordinates(curvas_nivel[curvas_nivel$level==y,])[[1]]  ,
function(x) data.frame(level=y,x)))))
curvas_nivel$geometry[1]
curvas_nivel$geometry[1] %>% as_data_frame()
curvas_nivel$geometry[1] %>% as_tibble()
ggmap(map) +
geom_path(data=puntos_contorno,  aes(lon,lat, group=linea, col=ele)) +
geom_path(data=data,col="yellow",aes(lng,lat), size = 2) +
theme_void() +
theme(legend.position = "none") +
scale_colour_viridis_c(option = "A", direction =  -1) +
annotate("text", x = -70.33, y = -33.228, hjust = 0, size = 9, fontface =2,
label = "Gradient ascent in \nCerro Manquehue") +
annotate("text", x = -70.33, y = -33.34, hjust = 0, size = 5,
label = "Author: @raimun2")
# paso las elevaciones a matriz
stream_mat <- raster_to_matrix(elev)
# achico la matriz (para que corra mas rapido)
stream_mat_small <- resize_matrix(stream_mat, 0.5)
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(st_as_sf(spatial_data), color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# cargamos archivo shp con poligonos de LasCondes
LasCondes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# exploramos la densidad poblacional
LasCondes$PERSONAS %>% plot()
# cargamos archivo shp con poligonos de LasCondes
LasCondes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# exploramos la densidad poblacional
LasCondes$PERSONAS %>% plot()
# exploramos la densidad poblacional
LasCondes %>% plot()
tmap_mode("plot")
tm_shape(LasCondes) +
tm_polygons(col = "PERSONAS", palette = pal)
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(LasCondes$PERSONAS)), direction = -1)
tmap_mode("plot")
tm_shape(LasCondes) +
tm_polygons(col = "PERSONAS", palette = pal)
# para interactivos cambiamos el modo de visualizacion a "view"
tmap_mode("view")
# repetimos el mismo plot
tm_shape(LasCondes) +
tm_polygons(col = "PERSONAS", palette = pal)
# cambiamos el mapa base
tm_shape(LasCondes) +
tm_polygons(col = "PERSONAS", palette = pal) +
tm_basemap("Stamen.Watercolor")
# graficamos los objetos espaciales como puntos
tm_shape(LasCondes) +
tm_dots(
col = "PERSONAS",
palette = pal,
popup.vars = TRUE
)
# graficamos usando funcion mapview
mapview(LasCondes)
# especificamos variable para colorear
mapview(LasCondes, zcol = "PERSONAS")
# especificamos paleta
mapview(LasCondes, zcol = "PERSONAS", col.regions = pal)
? mapview
# coloreamos de acuerdo al nombre del distrito y generamos un popup
mapview(
LasCondes,
zcol = "ZONA",
col.regions = pal,
popup = popupTable(
LasCondes,
zcol = c(
"PERSONAS",
"AREA",
"E65YMAS"
)
)
)
? tm_dots
? magma
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20])
# cargamos archivo shp con poligonos de LasCondes
LasCondes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# visualizacion inicial
ggplot(data, aes(lng,lat)) + geom_point()
# definimos proyeccion segun el formato proj4
prj_dd = "+proj=longlat +ellps=WGS84 +datum=WGS84  +no_defs"
# creamos objeto espacial
spatial_data <- SpatialPoints(data[,c("lng","lat")], proj4string = CRS(prj_dd))
#visualizamos con funcion nativa
plot(spatial_data)
# bbox del objeto espacial
bbox(spatial_data)
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
st_as_sf()
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
st_multipoint()
# definimos proyeccion segun el formato proj4
prj_dd = "+proj=longlat +ellps=WGS84 +datum=WGS84  +no_defs"
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20])
spatial_data <- SpatialPoints(data[,c("lng","lat")], proj4string = CRS(prj_dd))
# cargamos archivo shp con poligonos de LasCondes
LasCondes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# definimos proyeccion segun el formato proj4
prj_dd = "+proj=longlat +ellps=WGS84 +datum=WGS84  +no_defs"
# visualizacion inicial
ggplot(data, aes(lng,lat)) + geom_point()
#visualizamos con funcion nativa
plot(spatial_data)
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
SpatialPoints(.[,c("lng","lat")], proj4string = CRS(prj_dd))
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints( proj4string = CRS(prj_dd))
# invocamos librerias
pacman::p_load(tidyverse, ggmap, sp, sf, elevatr, raster, rayshader,
tmap, mapview, RColorBrewer, viridis, mapdeck)
# definimos proyeccion segun el formato proj4
prj_dd = "+proj=longlat +ellps=WGS84 +datum=WGS84  +no_defs"
# cargamos puntos de datos
data <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints( proj4string = CRS(prj_dd))
# cargamos archivo shp con poligonos de LasCondes
LasCondes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# visualizacion inicial
ggplot(data, aes(lng,lat)) + geom_point()
# visualizacion inicial
ggplot(data) + geom_sf()
# visualizacion inicial
ggplot() + geom_sf(data)
# visualizacion inicial
ggplot() + geom_sf(data=data)
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints( proj4string = CRS(prj_dd))
# visualizacion inicial
ggplot() + geom_sf(data=puntos)
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints(proj4string = CRS(prj_dd)) %>%
st_as_sf()
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(puntos$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints(proj4string = CRS(prj_dd)) %>%
st_as_sfc()
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(.$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints(proj4string = CRS(prj_dd)) %>%
st_as_sfc()
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(.$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints(proj4string = CRS(prj_dd)) %>%
st_as_sf()
# invocamos librerias
pacman::p_load(tidyverse, ggmap, sp, sf, elevatr, raster, rayshader,
tmap, mapview, RColorBrewer, viridis, mapdeck)
# definimos proyeccion segun el formato proj4
prj_dd = "+proj=longlat +ellps=WGS84 +datum=WGS84  +no_defs"
# cargamos puntos de datos
puntos <- read_rds("data/puntos.rds") %>%
filter(id == unique(.$id)[20]) %>%
select(lng,lat) %>%
SpatialPoints(proj4string = CRS(prj_dd)) %>%
st_as_sf()
# cargamos archivo shp con poligonos de LasCondes
las_condes <- read_sf("data/MZ_REGION_13.shp") %>%
filter(COMUNA == "13114")
# visualizacion inicial
ggplot() + geom_sf(data=puntos)
# visualizacion inicial
ggplot() +
geom_sf(data = las_condes) +
geom_sf(data=puntos)
# visualizacion inicial
ggplot() +
geom_sf(data = las_condes, aes(col = PERSONAS)) +
geom_sf(data = puntos)
# visualizacion inicial
ggplot() +
geom_sf(data = las_condes, aes(fill = PERSONAS)) +
geom_sf(data = puntos)
# visualizacion inicial
ggplot() +
geom_sf(data = las_condes, aes(fill = PERSONAS), col = NA) +
geom_sf(data = puntos)
#visualizamos con funcion nativa
plot(spatial_data)
#visualizamos con funcion nativa
plot(puntos)
spatial_data
# bbox del objeto espacial
bbox(puntos)
# obtenemos elevaciones de toda el area
elev <- get_elev_raster(las_condes, prj = prj_dd, z = 12)
st_coordinates(las_condes)
# obtenemos elevaciones de toda el area
elev <- get_elev_raster(st_coordinates(las_condes), prj = prj_dd, z = 12)
st_coordinates(las_condes)
CRS(las_condes)
# bbox del objeto espacial
bbox(puntos)
# bbox del objeto espacial
bbox(puntos$geometry)
? get_elev_raster
# obtenemos elevaciones de toda el area
elev <- get_elev_raster(puntos, prj = prj_dd, z = 12)
# visualizamos las elevaciones
plot(elev)
# traducimos elevaciones a curvas de nivel, con 100 niveles
curvas_nivel <- rasterToContour(elev, nlevels = 100) %>% st_as_sf()
# visualizamos curvas de nivel
plot(curvas_nivel)
# las visualizamos con ggplot
ggplot() +
geom_sf(data=st_as_sf(curvas_nivel))
# las visualizamos con ggplot
ggplot() +
geom_sf(data= curvas_nivel) +
geom_sf(data = las_condes, aes(fill = PERSONAS), alpha = .5, col = NA) +
geom_sf(data = puntos)
# buscamos un mapa base apropiado
maptype <- 'terrain'
map <- ggmap::get_stamenmap(bbox(spatial_data), maptype = maptype, zoom=12, source="stamen")
map <- ggmap::get_stamenmap(bbox(puntos), maptype = maptype, zoom=12, source="stamen")
bbox(puntos)
st_bbox(puntos)
map <- ggmap::get_stamenmap(st_bbox(puntos), maptype = maptype, zoom=12, source="stamen")
st_bbox(puntos)
? ggmap::get_stamenmap
# buscamos un mapa base apropiado
maptype <- 'terrain'
map <- ggmap::get_stamenmap(st_bbox(puntos), maptype = maptype, zoom=12, source="stamen")
st_bbox(puntos) %>% class()
st_bbox(puntos) %>% as.numeric()
map <- ggmap::get_stamenmap(st_bbox(puntos) %>% as.numeric(), maptype = maptype, zoom=12, source="stamen")
# visualizamos utilizando ggmap
ggmap(map)
bboxexp <- st_bbox(puntos) %>% as.numeric()
# visualizamos agregando la ruta
ggmap(map) +
geom_path(data=data, col="yellow", aes(lng,lat), size = 2)
# visualizamos agregando la ruta
ggmap(map) +
geom_path(data=puntos, col="yellow", aes(lng,lat), size = 2)
# visualizamos agregando la ruta
ggmap(map) +
geom_path(data=puntos, col="yellow", aes(lon,lat), size = 2)
# visualizamos agregando la ruta
ggmap(map) +
geom_sf(data=puntos, col="yellow",size = 2)
# exploramos la densidad poblacional
las_condes %>% plot()
map <- ggmap::get_stamenmap(puntos, maptype = maptype, zoom=12, source="stamen")
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=puntos, aes(lng, lat), col="yellow",size = 2)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=puntos, aes(lon, lat), col="yellow",size = 2)
View(puntos)
# visualizamos agregando la ruta
ggmap(map) +
coord_sf(crs = st_crs(3857))  # force the ggplot2 map to be in 3857
# visualizamos agregando la ruta
ggmap(map) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
geom_sf(data=puntos)
ggmap_bbox <- function(map) {
if (!inherits(map, "ggmap")) stop("map must be a ggmap object")
# Extract the bounding box (in lat/lon) from the ggmap to a numeric vector,
# and set the names to what sf::st_bbox expects:
map_bbox <- setNames(unlist(attr(map, "bb")),
c("ymin", "xmin", "ymax", "xmax"))
# Coonvert the bbox to an sf polygon, transform it to 3857,
# and convert back to a bbox (convoluted, but it works)
bbox_3857 <- st_bbox(st_transform(st_as_sfc(st_bbox(map_bbox, crs = 4326)), 3857))
# Overwrite the bbox of the ggmap object with the transformed coordinates
attr(map, "bb")$ll.lat <- bbox_3857["ymin"]
attr(map, "bb")$ll.lon <- bbox_3857["xmin"]
attr(map, "bb")$ur.lat <- bbox_3857["ymax"]
attr(map, "bb")$ur.lon <- bbox_3857["xmax"]
map
}
# Use the function:
map <- ggmap_bbox(map)
# visualizamos utilizando ggmap
ggmap(map)
# visualizamos agregando la ruta
ggmap(map) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
geom_sf(data=puntos)
map
st_bbox(map)
bbox(map)
# bbox del objeto espacial
st_bbox(puntos)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=puntos$geometry, aes(lon, lat), col="yellow",size = 2)
st_coordinates(puntos$geometry)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=st_coordinates(puntos$geometry), aes(X, Y), col="yellow",size = 2)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=data.frame(st_coordinates(puntos$geometry)), aes(X, Y), col="yellow",size = 2)
map <- ggmap::get_stamenmap(st_bbox(puntos) %>% as.numeric(), maptype = maptype, zoom=12, source="stamen")
# visualizamos utilizando ggmap
ggmap(map)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=data.frame(st_coordinates(puntos$geometry)), aes(X, Y), col="yellow",size = 2)
bboxexp <- st_bbox(puntos) %>% as.numeric()
bboxexp[1] <- bboxexp[1]-0.05
bboxexp[2] <- bboxexp[2]-0.02
bboxexp[3] <- bboxexp[3]+0.05
bboxexp[4] <- bboxexp[4]+0.02
# bbox del objeto espacial
bbox <- st_bbox(puntos)
# bbox del objeto espacial
bbox <- st_bbox(puntos) %>% as.numeric()
# visualizamos las elevaciones
plot(elev)
# traducimos elevaciones a curvas de nivel, con 100 niveles
curvas_nivel <- rasterToContour(elev, nlevels = 100) %>% st_as_sf()
# visualizamos curvas de nivel
plot(curvas_nivel)
# las visualizamos con ggplot
ggplot() +
geom_sf(data= curvas_nivel) +
geom_sf(data = las_condes, aes(fill = PERSONAS), alpha = .5, col = NA) +
geom_sf(data = puntos)
# obtencion de mapas base -----
maptype <- 'terrain'
map <- ggmap::get_stamenmap(bbox, maptype = maptype, zoom=12, source="stamen")
# las visualizamos con ggplot
ggplot() +
geom_sf(data= curvas_nivel) +
geom_sf(data = las_condes, aes(fill = PERSONAS), alpha = .5, col = NA) +
geom_sf(data = puntos, col = "yellow")
# visualizamos utilizando ggmap
ggmap(map)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=data.frame(st_coordinates(puntos$geometry)), aes(X, Y), col="yellow",size = 2)
bboxexp <- bbox
bboxexp[1] <- bboxexp[1]-0.05
bboxexp[2] <- bboxexp[2]-0.02
bboxexp[3] <- bboxexp[3]+0.05
bboxexp[4] <- bboxexp[4]+0.02
map <- ggmap::get_stamenmap(bboxexp, maptype = maptype, zoom=12, source="stamen")
# visualizamos utilizando ggmap
ggmap(map)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=data.frame(st_coordinates(puntos$geometry)), aes(X, Y), col="yellow",size = 2)
# paso las elevaciones a matriz
stream_mat <- raster_to_matrix(elev)
# achico la matriz (para que corra mas rapido)
stream_mat_small <- resize_matrix(stream_mat, 0.5)
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(st_as_sf(spatial_data), color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(st_as_sf(points), color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay((points), color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(points, color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# creo capas de visualizacion y sombreado con rayshader
stream_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(stream_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(puntos, color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = stream_mat_small)) %>%
plot_map()
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(las_condes$PERSONAS)), direction = -1)
# visualizamos utilizando ggmap
ggmap(map)
# visualizamos agregando la ruta
ggmap(map) +
geom_point(data=data.frame(st_coordinates(puntos$geometry)), aes(X, Y), col="yellow",size = 2)
# creo capas de visualizacion y sombreado con rayshader
elev_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(elev_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = elev_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(puntos, color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = elev_mat_small)) %>%
plot_map()
# paso las elevaciones a matriz
elev_mat <- raster_to_matrix(elev)
# achico la matriz (para que corra mas rapido)
elev_mat_small <- resize_matrix(elev_mat, 0.5)
# creo capas de visualizacion y sombreado con rayshader
elev_mat_small %>%
height_shade() %>%
add_overlay(sphere_shade(elev_mat_small, texture = "desert",
zscale=4, colorintensity = 5), alphalayer = 0.8) %>%
add_overlay(generate_point_overlay(st_as_sf(curvas_nivel),
color = viridisLite::magma(100, direction = -1), size = 1, pc = 19,
raster::extent(elev), heightmap = elev_mat_small), alphalayer = 0.9) %>%
add_overlay(generate_point_overlay(puntos, color = "yellow", size = 1, pc = 19,
raster::extent(elev), heightmap = elev_mat_small)) %>%
plot_map()
# graficamos usando funcion mapview
mapview(las_condes)
# especificamos variable para colorear
mapview(las_condes, zcol = "PERSONAS")
# especificamos paleta
mapview(las_condes, zcol = "PERSONAS", col.regions = pal)
? mapview
# coloreamos de acuerdo al nombre del distrito y generamos un popup
mapview(
las_condes,
zcol = "ZONA",
col.regions = pal,
popup = popupTable(
las_condes,
zcol = c(
"PERSONAS",
"AREA",
"E65YMAS"
)
)
)
