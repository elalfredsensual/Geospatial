# Calculo de Hotspots con radios mas y menos extensos de agregacion (adjust*bandwidth)
del_hotspots_1 <- stats::density(pts, adjust=.25) %>%
map_dfr(1:2, function(x) .[[x]])
# Calculo de Hotspots con radios mas y menos extensos de agregacion (adjust*bandwidth)
del_hotspots_1 <- stats::density(pts, adjust=.25)
? stats::density
geom_density_2d()
? geom_density_2d()
MASS::kde2d(pts[,1], pts[,2])
df2d <- MASS::kde2d(pts[,1], pts[,2])
image(df2d)
df2d <- MASS::kde2d(pts[,1], pts[,2], n = 100)
image(df2d)
del_hotspots_1 <- stats::density(p, adjust=.25)
# parametro de radio de kernel
plot(del_hotspots_1, main='Densidad de Delitos Violentos 0.25')
image(df2d)
del_hotspots_1 <- stats::density(p, adjust=.25)
# parametro de radio de kernel
plot(del_hotspots_1, main='Densidad de Delitos Violentos 0.25')
del_hotspots_2 <- stats::density(pts, adjust=.50) # parametro de radio de kernel
plot(del_hotspots_2, main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- stats::density(p, adjust=.50) # parametro de radio de kernel
plot(del_hotspots_2, main='Densidad de Delitos Violentos 0.50')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], n = 100)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.2)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.02)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.01)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.05)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.1)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.5)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.2)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.3)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.4)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 0.5)
image(del_hotspots_1)
extent(violencia)
6307023 - 6299685
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 70)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 200)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 2000)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 4000)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1000)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1500)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 200)
image(del_hotspots_1)
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1500)
image(del_hotspots_1)
plot(del_hotspots_2, main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 3000)
image(del_hotspots_2)
plot(del_hotspots_2, main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- stats::density(p, adjust=.50) # parametro de radio de kernel
plot(del_hotspots_2, main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 2500)
image(del_hotspots_2)
image(del_hotspots_1)
viridis::viridis(100)
image(del_hotspots_1, col = viridis::viridis(100))
image(del_hotspots_2, viridis::viridis(100))
image(del_hotspots_2, col = viridis::viridis(100))
image(del_hotspots_1, col = viridis::viridis(100))
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.25')
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
mod <- vgm(model  = "Exp", psill  = 0.3, range  = 10, nugget = 0.01)
library(mgcv)
mod <- vgm(model  = "Exp", psill  = 0.3, range  = 10, nugget = 0.01)
? vgm
library(gstat)
mod <- vgm(model  = "Exp", psill  = 0.3, range  = 10, nugget = 0.01)
formMod <- z ~ 1
del_hotspots_1
del_hotspots_1 %>% summary()
del_hotspots_1 %>% max()
del_hotspots_1$z %>% max()
? vgm
mod <- vgm(model  = "Exp", nugget = 0.01)
variog <- variogram(formMod, violencia)
variog <- variogram(formMod, pts)
# cargar datos
violencia <- read_rds("data/casos_violencia.rds")  %>%
SpatialPointsDataFrame(coords = .[,c("x","y")],
proj4string = CRS(crs_utm)) %>%
st_as_sf() %>%
mutate(eventos = 1)
pts <- violencia$geometry %>% unlist() %>% matrix(nrow=2) %>% t()
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1500)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 2500)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1200)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 120)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 120, n = 1000)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 120, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 2500, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 200, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 10, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 100, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1000, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 2000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.50')
del_hotspots_1 <- MASS::kde2d(pts[,1], pts[,2], h = 1500, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 1500')
100/1500
100/3000
del_hotspots_2 <- MASS::kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')
formMod <- eventos ~ 1
mod <- vgm(model  = "Exp", nugget = 0.01)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS<-fit.variogram(variog, model = mod,  fit.method = 6)
mod <- vgm(model  = "Exp", nugget = 0.00001)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod,  fit.method = 6)
variog <- variogram(formMod, violencia)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = statPointsTMP,
model = variog,
newdata = violencia, ],
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = statPointsTMP,
model = variog,
newdata = violencia,
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variog,
newdata = violencia,
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = mod,
newdata = violencia,
debug.level = 0)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod,  fit.method = 6)
mod <- vgm(model  = "Exp", nugget = 0.0001)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod,  fit.method = 6)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
plot(variog, variogFitOLS, main="OLS Model")
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variog,
newdata = violencia,
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variogFitOLS,
newdata = violencia,
debug.level = 0)
? krige
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variogFitOLS,
newdata = violencia[,1:10],
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variogFitOLS,
newdata = violencia[1:10,],
debug.level = 0)
View(GAM.OK)
mod <- vgm(model  = "Exp", nugget = 0.001)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
mod <- vgm(model  = "Exp", nugget = 0.0001)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
mod <- vgm(model  = "Exp", nugget = 0.00001)
variog <- variogram(formMod, violencia)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
plot(GAM.OK)
variog <- variogram(formMod, mz_lc)
formMod <- EDUC ~ 1
mod <- vgm(model  = "Exp", nugget = 0.00001)
variog <- variogram(formMod, mz_lc)
mz_point <- mz_lc %>% st_as("POINTS")
mz_point <- mz_lc %>% st_sf("POINTS")
st_centroid(mz_lc)
mz_point <- st_centroid(mz_lc)
variog <- variogram(formMod, mz_point)
mod <- vgm(model  = "Exp", nugget = 0.00001)
variog <- variogram(formMod, mz_point)
mz_point$EDUC %>% summary()
mz_point <- st_centroid(mz_lc) %>%
drop_na()
formMod <- EDUC ~ 1
mod <- vgm(model  = "Exp", nugget = 0.00001)
variog <- variogram(formMod, mz_point)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = violencia,
model = variogFitOLS,
newdata = violencia,
debug.level = 0)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(GAM.OK)
# regresiones
plot(mz_point$EDUC)
# regresiones
plot(mz_point)
plot(GAM.OK)
mod <- vgm(model  = "Exp", nugget = 0.0001)
variog <- variogram(formMod, mz_point)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(GAM.OK)
mod <- vgm(model  = "Exp", nugget = 0.001)
variog <- variogram(formMod, mz_point)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(GAM.OK)
mod <- vgm(model  = "Exp", nugget = 0.01)
variog <- variogram(formMod, mz_point)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(GAM.OK)
# regresiones
plot(mz_point)
plot(variogFitOLS)
plot(variog)
mod <- vgm(model  = "Exp", nugget = 0.5)
variog <- variogram(formMod, mz_point)
# Se ajusta el variograma por minimos cuadrados
variogFitOLS <- fit.variogram(variog, model = mod)
plot(variog)
# Prediccion tipo Kriging
GAM.OK <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(GAM.OK)
plot(variogFitOLS)
plot(GAM.OK)
plot(variogFitOLS, cutoff = 10)
plot(variogFitOLS, cutoff = 100)
plot(variogFitOLS, cutoff = 1000)
plot(variogFitOLS, cutoff = 10000)
plot(variog)
plot(variog, add = TRUE)
plot(variogFitOLS, cutoff = 10000)
plot(variog, add = TRUE)
points(variog, add = TRUE)
plot(variogFitOLS, cutoff = 10000)
plot(variog, add = TRUE)
plot(variogFitOLS, cutoff = 5000)
plot(variog, add = TRUE)
plot(variogFitOLS, cutoff = 4300)
plot(variog, add = TRUE)
plot(variog, add = T)
plot(variogFitOLS, cutoff = 4300, add=T)
plot(variog, add = T)
plot(variogFitOLS, cutoff = 4300, add=T)
plot(variog, add = T)
lines(variogFitOLS, cutoff = 4300, add=T)
line(variogFitOLS, add=T)
# Prediccion tipo Kriging
modelo_krige <- krige(formula = formMod ,
locations = mz_point,
model = variogFitOLS,
newdata = mz_point,
debug.level = 0)
plot(modelo_krige)
## Visualizar
plot(violencia, main = "Delitos violentos en la comuna de Las Condes", col ="red")
# Transformacion las manzanas de Las Condes de Poligonos a puntos
lc_p = SpatialPointsDataFrame(mz_lc, data = mz_lc@data, proj4string = CRS(crs_utm))
# Transformacion las manzanas de Las Condes de Poligonos a puntos
lc_p = SpatialPointsDataFrame(mz_lc, data = mz_lc@data, proj4string = (crs_utm))
## Numero de vecinos
nvec=12
## Crear matriz de pesos espciales (cambios de formatos para calcular morgan)
nb <- nb2listw(neighbours = knn2nb(
knn = knearneigh( x = mz_point, k = nvec, longlat = F)),
style = "W")
## Crear matriz de pesos espciales (cambios de formatos para calcular morgan)
nb <- nb2listw(neighbours = knn2nb(
knn = knearneigh( x = mz_point, k = nvec)),
style = "W")
plot(lc_p)
plot(mz_point)
plot(nb,coordinates(lc_p),add=T, col = "grey50")
plot(nb)
plot(nb,coords= pts,add=T, col = "grey50")
plot(nb,coords= mz_point,add=T, col = "grey50")
## Asignar pesos por poblacion de cada manzana
nb$weights = lapply(1:nrow(lc_p@data), function(i)
lc_p@data$pob[lc_p@data$id %in% nb$neighbours[[i]]] /
sum(lc_p@data$pob[lc_p@data$id %in% nb$neighbours[[i]]]))
## Asignar pesos por poblacion de cada manzana
nb$weights = lapply(1:nrow(mz_point), function(i)
mz_point$pob[mz_point$id %in% nb$neighbours[[i]]] /
sum(mz_point$pob[mz_point$id %in% nb$neighbours[[i]]]))
## Test de Moran de autocorrelacion global
spdep::moran.test(x = mz_point$EDUC,  listw = nb)
moran.plot(x = mz_point$EDUC,  listw = nb, labels=as.character(mz_point$id))
## Test de Moran de autocorrelacion global
spdep::moran.test(x = st_drop_geometry(mz_point$EDUC),  listw = nb)
st_drop_geometry(mz_point)
## Test de Moran de autocorrelacion global
spdep::moran.test(x = st_drop_geometry(mz_point)$EDUC,  listw = nb)
library(tidygeocoder)
library(sf)
library(mapview)
library(tigris)
library(tidyverse)
geo("Santa Cruz, CA", method="arcgis")
geo("Las Condes, Chile", method = "arcgis")
geo("Las Condes, Chile", method = "arcgis") %>% st_as_sf() %>% mapview()
geo("Las Condes, Chile", method = "arcgis") %>% st_as_sf("POINT") %>% mapview()
reverse_geocode(lat = "-33.4", long ="-70.6", adress = "estimated adress", method = "arcgis")
p <- geo("Santa Cruz, CA", method="arcgis") %>% as_tibble()
View(p)
reverse_geocode(p,  method = "arcgis")
geo("Las Condes, Chile", method = "arcgis") %>% st_as_sf(coords = c("long", "lat")) %>% mapview()
reverse_geocode(p, lat = lat, long = long,  method = "arcgis")
p2 <- geo("Las Condes, Chile", method="arcgis") %>% as_tibble()
p2 <- geo("Luxemburgo 9595, Las Condes, Chile", method="arcgis") %>% as_tibble()
p2
reverse_geocode(p2, lat = lat, long = long,  method = "arcgis")
dirs <- c("Cardenal Newman 1480, Las Condes, Chile",
"Juan XXIII 6821, Vitacura, Chile")
p2 <- geo(dirs, method="arcgis") %>% as_tibble()
p2
dirs <- c("Cardenal Newman 1480, Las Condes, Chile",
"Juan XXIII 6821, Vitacura, Chile",
"Los Dibujantes 1585, vitacura, Chile",
"La Cortada 2099, Vitacura, Chile",
"jose M perceval 10253, Vitacura, chile",
"Capitan Hemmendinger 9595, Las Condes, Chile",
"Luxemburgo 9595, Las Condes, Chile")
p2 <- geo(dirs, method="arcgis") %>% as_tibble()
p2 %>%  st_as_sf(coords = c("long", "lat")) %>%
mapview()
reverse_geocode(p2, lat = lat, long = long,  method = "arcgis")
# Cargar Librerias
pacman::p_load(rgdal, rgeos, stars, spatstat, spdep, sf, raster,
spatialreg, tidyverse, vapour, gstat, MASS)
# defino CRS que voy a usar
crs_utm <-  vapour_srs_wkt("+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
crs_ll <- vapour_srs_wkt("+proj=longlat +datum=WGS84 +no_defs")
# Datos de delitos
violencia <- read_rds("data/casos_violencia.rds")  %>%
SpatialPointsDataFrame(coords = .[,c("x","y")],
proj4string = CRS(crs_utm)) %>%
st_as_sf()
View(violencia)
# Cargar datos censales de nivel educativo en Las Condes a nivel de personas
censo_lc <- readRDS("data/censo_lc.rds") %>%
mutate(poblacion = 1,
CODINE011 = as.character(IDMZ)) %>%
dplyr::select(-IDMZ)
View(censo_lc)
# Calcular poblacion por manzana
poblacion <-
censo_lc %>%
group_by(CODINE011) %>%
summarise(poblacion = sum(poblacion))
View(poblacion)
View(censo_lc)
# Calcular Nivel Educacional de jefes de hogar por manzana
nived <- censo_lc %>%
filter(DSOST==1) %>%  # Filtar sostenedores
group_by(CODINE011) %>%
summarise(EDUC = mean(EDUC))
View(nived)
View(violencia)
# Cargar Poligonos de Manzanas de Las Condes (Censo 2012)
# acoplar con datos de nivel educacional a manzanas
mz_lc <- readRDS("data/manzanas_lc.rds") %>%
st_as_sf() %>%
left_join(poblacion, by = "CODINE011") %>%
left_join(nived, by = "CODINE011") %>%
st_as_sf(wkt = crs_utm) %>%
mutate(area = st_area(.)/10000,
densidad = poblacion/area,
violencia = lengths(st_intersects(geometry, violencia))) %>%
drop_na()
View(mz_lc)
# manzanas en version puntos
mz_point <- mz_lc %>%
st_centroid()
# visualizamos
ggplot() +
geom_sf(data=mz_lc) +
geom_sf(data = violencia)
# Calculo de Hotspots con radios mas y menos extensos de agregacion
# extraigo puntos para la funcion kde2d
pts <- violencia$geometry %>% unlist() %>% matrix(nrow=2) %>% t()
View(pts)
del_hotspots_1 <- kde2d(pts[,1], pts[,2], h = 1500, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.06')
del_hotspots_2 <- kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')
gs <- gstat(formula = violencia~1, locations = mz_lc)
gs
rast <- raster(mz_lc, res=100)
idw <- interpolate(rast, gs)
plot(idw, col = viridis::viridis(100), main='Densidad de Delitos KNN')
formMod <- EDUC ~ 1
variog_empirico <- variogram(formMod, mz_point)
plot(variog_empirico)
variog_teorico <- fit.variogram(variog_empirico,
model = vgm(model  = "Exp", nugget = 0.8))
plot(variog_teorico, cutoff = 4300)
? krige
# Prediccion tipo Kriging
modelo_krige <- krige(formula = formMod ,
locations = mz_point,
model = variog_teorico,
newdata = mz_point,
debug.level = 0)
plot(modelo_krige)
# modelo de regresion convencional
modviol <- lm(violencia ~ log(densidad) + EDUC, data = mz_point)
summary(modviol)
## Crear matriz de pesos espaciales
nb <- nb2listw(neighbours = knn2nb(
knn = knearneigh(x = mz_point, k = 12)),
style = "W")
View(nb)
#Error espacial
fit.errdurb <- errorsarlm(violencia ~ log(densidad) + EDUC, data = mz_point,
listw = nb, etype="error", method="eigen")
summary(fit.errdurb)
moran.test(fit.errdurb$residuals, nb) ## Test Moran residuos
#Lag espacial
fit.durb <- lagsarlm(violencia ~ log(densidad) + EDUC, data = mz_point,
listw = nb ,type="lag",method="eigen")
summary(fit.durb)
#Error y Lag espacial
fit.sac <- sacsarlm(violencia ~ log(densidad) + EDUC, data = mz_point,
listw=nb, type="sac", method="eigen")
summary(fit.sac)
moran.test(fit.sac$residuals, nb)
predict(fit.sac)
? sacsarlm
library(tidygeocoder)
library(sf)
library(mapview)
library(tigris) # censo us
library(tidyverse)
? geo
