color = "#BDBDC3",
weight = 1)
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, leafpop, leaflet, leaflet.extras, mapdeck, ggplotly)
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, leafpop, leaflet, leaflet.extras, mapdeck, plotly)
tmap_mode
? tmap_mode
tmap_mode("plot")
tm_shape(bavaria) + tm_polygons(col = "D__B_20", midpoint = 0)
map <- ggmap::get_stamenmap(bbox(bavaria), maptype = maptype, zoom=12, source="stamen")
maptype <- 'terrain'
map <- ggmap::get_stamenmap(bbox(bavaria), maptype = maptype, zoom=12, source="stamen")
? ggmap
? bbox
maptype <- 'terrain'
map <- ggmap::get_stamenmap(sp::bbox(bavaria), maptype = maptype, zoom=12, source="stamen")
sp::bbox(bavaria)
map <- ggmap::get_stamenmap(sp::bbox(bavaria$geometry), maptype = maptype, zoom=12, source="stamen")
sp::bbox(bavaria$geometry)
map <- ggmap::get_stamenmap(st_bbox(bavaria$geometry), maptype = maptype, zoom=12, source="stamen")
st_bbox(bavaria$geometry)
st_bbox(bavaria)
maptype <- 'terrain'
map <- ggmap::get_stamenmap(st_bbox(bavaria), maptype = maptype, zoom=12)
map <- ggmap::get_stamenmap(st_bbox(bavaria), maptype = maptype)
map <- get_stamenmap(st_bbox(bavaria), maptype = maptype)
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap)
map <- get_stamenmap(st_bbox(bavaria), maptype = maptype)
st_bbox(bavaria)
sp::bbox(bavaria$geometry[1])
map <- get_stamenmap(st_bbox(bavaria), maptype = maptype, zoom = 6)
? get_stamenmap
map <- get_stamenmap(st_bbox(bavaria), maptype =  'terrain', zoom = 6)
bbox <- c(left = -97.1268, bottom = 31.536245, right = -97.099334, top = 31.559652)
ggmap(get_stamenmap(bbox, zoom = 13))
st_bbox(bavaria)
bbox <- c(left = -97.1268, bottom = 31.536245, right = -97.099334, top = 31.559652)
bbox2 <- st_bbox(bavaria)
bbox2 <- st_bbox(bavaria) %>% as.numeric()
ggmap(get_stamenmap(bbox2, zoom = 13))
bbox <- st_bbox(bavaria) %>% as.numeric()
map <- get_stamenmap(bbox, maptype =  'terrain', zoom = 6)
ggmap(map)
map <- get_stamenmap(bbox, maptype =  'terrain', zoom = 9)
ggmap(map)
map <- get_stamenmap(bbox, maptype =  'terrain', zoom = 7)
ggmap(map)
bavaria_3857 <- st_transform(bavaria, 3857)
ggmap(map) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
geom_sf(data = bavaria_3857, aes(fill = B__E_20), inherit.aes = FALSE)
ggmap(map) +
coord_sf(crs = st_crs(3857))
ggmap(map)
ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE)
ggplotly(ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE))
# cargamos paquetes
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap)
# cargamos archivo shp con poligonos de bavaria
bavaria <- read_sf("bavaria.shp")
# cargamos archivo shp con poligonos de bavaria
bavaria <- read_sf("data/bavaria.shp")
# exploramos la densidad poblacional
bavaria$D__B_20
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(bavaria$D__B_20)), direction = -1)
# cargamos paquetes
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, viridis,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap)
# cargamos archivo shp con poligonos de bavaria
bavaria <- read_sf("data/bavaria.shp")
# exploramos la densidad poblacional
bavaria$D__B_20
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(bavaria$D__B_20)), direction = -1)
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", midpoint = 0)
# para interactivos cambiamos el modo de visualizacion a "view"
tmap_mode("view")
# repetimos el mismo plot
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", midpoint = 0)
# repetimos el mismo plot
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
# hacemos facetas del mapa segun
tm_shape(bavaria) +
tm_polygons(col = "D__B_20") +
tm_facets(by = "Aggregt")
# graficamos los objetos espaciales como puntos
tm_shape(bavaria) +
tm_dots(
col = "D__B_20",
palette = pal,
popup.vars = TRUE
)
mapview(bavaria)
mapview(
bavaria,
zcol = "Raumnht",
col.regions = pal,
popup = popupTable(
bavaria,
zcol = c(
"D__B_20",
"B__E_20",
"Ar_2015"
)
)
)
mapview(
bavaria,
col.regions = pal,
popup = popupTable(
bavaria,
zcol = c(
"D__B_20",
"B__E_20",
"Ar_2015"
)
)
)
# coloreamos de acuerdo al nombre del distrito
mapview(
bavaria,
zcol = "Raumnht",
col.regions = pal,
popup = popupTable(
bavaria,
zcol = c(
"D__B_20",
"B__E_20",
"Ar_2015"
)
)
)
leaflet(data=bavaria)
leaflet(data=bavaria) %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
)
leaflet() %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht,
color = "#BDBDC3",
weight = 1)
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles( # agregamos mapa base
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
weight = 1)
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles( # agregamos mapa base
"Stamen.Toner",
group = "OpenStreetMap"
) %>%
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
weight = 1)
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles( # agregamos mapa base
"Stamen.Toner",
group = "OpenStreetMap"
) %>%
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
fillOpacity = 1)
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles("OpenStreetMap") %>%  # agregamos mapa base
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
fillOpacity = 1)
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles("OpenStreetMap") %>%  # agregamos mapa base
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
fillOpacity = 1,
color = NA)
# agregamos popups
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht, # definimos la variable a expresar (distrito)
color = "#BDBDC3",
weight = 1)
# agregamos opciones de mapa base
leaflet() %>%
addProviderTiles("OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles("Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles("Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht, # definimos la variable a expresar (distrito)
color = "#BDBDC3",
weight = 1)
# agregamos opciones de mapa base
leaflet() %>%
addProviderTiles("OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles("Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles("Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht, # definimos la variable a expresar (distrito)
color = "#BDBDC3",
weight = 1) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain"),
# position it on the topleft
position = "topleft"
)
basemap <- leaflet() %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles(
"Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "Esri.WorldStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
# add a layers control
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
position = "topleft"
)
basemap %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht,
color = "#BDBDC3",
weight = 1)
# extraemos un mapa con ggmap
map <- get_stamenmap((st_bbox(bavaria) %>% as.numeric()),
maptype =  'terrain', zoom = 7)
# guardamos el mapa en un objeto p
p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20))
p
# guardamos el mapa en un objeto p
p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE)
p
# guardamos el mapa en un objeto p
(p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE))
# guardamos el mapa en un objeto p
(p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE) +
scale_fill_manual(values = pal))
pal
? scale_fill_continuous
? scale_fill_gradientn
# guardamos el mapa en un objeto p
(p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE) +
scale_fill_gradientn(colours  = pal))
# generamos el mapa dinamico con plotly
ggplotly(p)
mapdeck(bavaria)
library(shiny)
ui <- fluidPage(
# front end interface
)
server <- function(input, output, session) {
# back end logic
}
shinyApp(ui = ui, server = server)
# cargamos paquetes
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, viridis,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap)
# cargamos archivo shp con poligonos de bavaria
bavaria <- read_sf("data/bavaria.shp")
# exploramos la densidad poblacional
bavaria$D__B_20
# creamos una paleta que nos va a servir para los colores
pal <- magma(n = length(unique(bavaria$D__B_20)), direction = -1)
# primera libreria que probaremos es tmap
tmap_mode("plot")
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
# tmap permite hacer graficos estaticos e interactivos
# para interactivos cambiamos el modo de visualizacion a "view"
tmap_mode("view")
# repetimos el mismo plot
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal)
# cambiamos el mapa base
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal) +
tm_basemap("Stamen.Watercolor")
# hacemos facetas del mapa segun distrito o ciudad
tm_shape(bavaria) +
tm_polygons(col = "D__B_20", palette = pal) +
tm_facets(by = "Aggregt")
# graficamos los objetos espaciales como puntos
tm_shape(bavaria) +
tm_dots(
col = "D__B_20",
palette = pal,
popup.vars = TRUE
)
# segunda libreria que probamos es mapview
# graficamos usando funcion mapview
mapview(bavaria)
# especificamos variable para colorear
mapview(bavaria, zcol = "D__B_20")
# especificamos paleta
mapview(bavaria, zcol = "D__B_20", col.regions = pal)
? mapview
# coloreamos de acuerdo al nombre del distrito y generamos un popup
mapview(
bavaria,
zcol = "Raumnht",
col.regions = pal,
popup = popupTable(
bavaria,
zcol = c(
"D__B_20",
"B__E_20",
"Ar_2015"
)
)
)
# tercera libreria que probamos sera leaflet
# creamos un mapa por capas
leaflet() %>% # creamos objeto mapa
addProviderTiles("OpenStreetMap") %>%  # agregamos mapa base
addPolygons(data = bavaria$geometry, # agregamos los poligonos
fillColor  = pal,
fillOpacity = 1,
color = NA)
# agregamos popups
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht, # definimos la variable a expresar (distrito)
color = "#BDBDC3",
weight = 1)
# agregamos opciones de mapa base
leaflet() %>%
addProviderTiles("OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles("Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles("Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht, # definimos la variable a expresar (distrito)
color = "#BDBDC3",
weight = 1) %>%
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain"),
# lo ubicamos en la izquierda superior
position = "topleft"
)
# creamos un objeto "mapa base" con varias opciones
basemap <- leaflet() %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Stamen.Toner",
group = "Stamen.Toner"
) %>%
addProviderTiles(
"Stamen.Terrain",
group = "Stamen.Terrain"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "Esri.WorldStreetMap"
) %>%
addProviderTiles(
"Wikimedia",
group = "Wikimedia"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB.Positron"
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Esri.WorldImagery"
) %>%
# add a layers control
addLayersControl(
baseGroups = c(
"OpenStreetMap", "Stamen.Toner",
"Stamen.Terrain", "Esri.WorldStreetMap",
"Wikimedia", "CartoDB.Positron", "Esri.WorldImagery"
),
position = "topleft"
)
# usamos el objeto para construir visualizaciones
basemap %>%
addPolygons(data = bavaria$geometry,
fillColor  = pal,
fillOpacity = 0.8,
popup = bavaria$Raumnht,
color = "#BDBDC3",
weight = 1)
# cuarta libreria que usaremos es plotly
# plotly permite convertir ggplot en dinamicos, entre otras funciones
# extraemos un mapa con ggmap
map <- get_stamenmap((st_bbox(bavaria) %>% as.numeric()),
maptype =  'terrain', zoom = 7)
# guardamos el mapa en un objeto p
(p <- ggmap(map) +
geom_sf(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE) +
scale_fill_gradientn(colours  = pal))
# generamos el mapa dinamico con plotly
ggplotly(p)
library(ggiraph)
library(ggiraph)
library(widgetframe)
widgetframe::frameWidget(ggiraph(code=print(p)))
(p <- ggmap(map) +
geom_sf_interactive(data = bavaria, aes(fill = B__E_20), inherit.aes = FALSE) +
scale_fill_gradientn(colours  = pal))
widgetframe::frameWidget(ggiraph(code=print(p)))
bavaria$Raumnht
(p <- ggmap(map) +
geom_sf_interactive(data = bavaria, aes(fill = B__E_20, tooltip=sprintf("%s<br/>%s",Raumnht,B__E_20)), inherit.aes = FALSE) +
scale_fill_gradientn(colours  = pal))
widgetframe::frameWidget(ggiraph(code=print(p)))
# cargamos paquetes
pacman::p_load(tmap, sf, tidyverse, mapview, RColorBrewer, viridis,
leafpop, leaflet, leaflet.extras, mapdeck, plotly, ggmap,
ggiraph, widgetframe)
library(rbokeh)
plot <- figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "gray")
library(rbokeh)
plot <- figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "gray")
widgetframe::frameWidget(plot,width=600,height=400)
plot <- figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("germany", col = "gray")
plot <- figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "gray") %>%
ly_polygons(long, lat, data = bavaria, size = 5,
hover = c(Raumnht, B__E_20))
? ly_polygons
