mapview(
las_condes,
zcol = "ZONA",
col.regions = pal,
popup = popupTable(
las_condes,
zcol = c(
"PERSONAS",
"AREA",
"E65YMAS"
)
)
)
pacman::p_load(raster, mapview, sf)
# Cargamos imagen satelital de las condes ----
LC <- brick("data/OLI_LC.tif")
LC
# asigno nombres a las bandas
names(LC) <- c("aerosol","blue", "green", "red", "nir", "swir1", "swir2", "tir1" )
### utm utilizado a nivel regional (depende de la zona y hemisferio)
crs_utm <- "+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Reproyección de Imagen
LC_ll <- projectRaster(LC, crs = crs_utm)
# Color Natural
plotRGB(LC_ll, r = 4, g = 3, b = 2)
# Color Natural con contraste lineal
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "lin")
# Color Natural con contraste de quiebres naturales
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "hist")
# definimos fronteras (extent)
ext <- extent(c(350638, 358235,  6299157, 6304228))
# recortamos
LC_crop <- crop(x = LC, y = ext, snap="out")
# visualizamos
plotRGB(LC_crop, r = 4, g = 3, b = 2, stretch = "lin")
# Infrarojo (5,4,3)
plotRGB(LC, r = 5, g = 4, b = 3, stretch = "lin")
# Agricultura (6,5,2)
plotRGB(LC, r = 6, g = 5, b = 2, stretch = "lin")
# Penetración de la Radiación en la Atmósfera (7,6,5)
plotRGB(LC, r = 7, g = 6, b = 5, stretch = "lin")
# Uso del Suelo / Masas de Agua (5,6,4)
plotRGB(LC, r = 5, g = 6, b = 4, stretch = "lin")
# Infrarojo de Onda Corta (7,5,4)
plotRGB(LC, r = 7, g = 5, b = 4, stretch = "lin")
# Análisis de Vegetación (6,5,4)
plotRGB(LC, r = 6, g = 5, b = 4, stretch = "lin")
# Análisis de Vegetación Sana (5,6,2)
plotRGB(LC, r = 5, g = 6, b = 2, stretch = "lin")
# normalizamos los valores del canal 5 (x-mean)/sd
infrared <- scale(LC[[5]])
# dibujamos el infrarojo
plot(infrared)
# extraemos zonas con infrarojo alto, que aproximan a la vegetacion
vegetacion <- calc(infrared, fun = function(x) ifelse(x <= 3, NA, x))
pal_green <- colorRampPalette(c("green","springgreen4", "darkgreen"))
plot(vegetacion , col = pal_green( 200 ))
# pasamos pixeles a poligonos
poligonos_infrarojo <- rasterToPolygons(vegetacion, digits = 16) %>% st_as_sf()
plot(poligonos_infrarojo, pal = pal_green)
# veamos que pasa al unirlos
merged_poligonos_infrarojo <- poligonos_infrarojo  %>%
st_union() %>% # unimos vecinos
st_cast("POLYGON")  # aislamos los poligonos resultantes
plot(merged_poligonos_infrarojo, pal = pal_green)
plot(merged_poligonos_infrarojo)
# extraemos los valores del raster original sobre cada poligono resultante y lo guardamos en un df
vegetacion_poly <- data.frame(vegetacion = raster::extract(vegetacion,
st_as_sf(merged_poligonos_infrarojo),
fun=mean))
# le asignamos al df las geometrias de los poligonos
st_geometry(vegetacion_poly) <- st_sfc(merged_poligonos_infrarojo)
# visualizamos
plot(vegetacion_poly, pal = pal_green)
# agregar la frontera de Las Condes
LasCondes <- sf::st_read("data/LasCondes.shp")
plot(LasCondes$geometry)
# agregar la frontera de Las Condes
LasCondes <- sf::st_read("data/LasCondes.shp")
# agregar la frontera de Las Condes
LasCondes <- sf::st_read("data/LasCondes.shp")
plot(LasCondes$geometry)
plot(vegetacion_poly, pal = pal_green, add = TRUE)
# visualizamos en mapa interactivo
mview <- mapview(LasCondes, color = "#05A39B", alpha.region =0)+
viewRGB(LC, r = 4, g = 3, b = 2, na.color = "transparent") +
mapview(vegetacion_poly, na.color = "transparent", col.regions = pal_green)
mview
# guardamos el mapa como pagina html
mapshot(x = mview, url = "mapa_veg.html")
pacman::p_load(raster, mapview, sf)
# Cargamos imagen satelital de las condes ----
LC <- brick("data/OLI_LC.tif")
LC
library(pacman)
p_load(raster, mapview, sf)
pacman::p_load(raster, mapview, sf)
# Cargamos imagen satelital de las condes ----
LC <- brick("data/OLI_LC.tif")
LC
# asigno nombres a las bandas
names(LC) <- c("aerosol","blue", "green", "red", "nir", "swir1", "swir2", "tir1" )
LC
### utm utilizado a nivel regional (depende de la zona y hemisferio)
crs_utm <- "+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Reproyección de Imagen
LC_ll <- projectRaster(LC, crs = crs_utm)
# Color Natural
plotRGB(LC_ll, r = 4, g = 3, b = 2)
# Color Natural con contraste lineal
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "lin")
# Color Natural con contraste de quiebres naturales
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "hist")
# Color Natural con contraste lineal
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "lin")
# definimos fronteras (extent)
ext <- extent(c(350638, 358235,  6299157, 6304228))
# recortamos
LC_crop <- crop(x = LC, y = ext, snap="out")
# visualizamos
plotRGB(LC_crop, r = 4, g = 3, b = 2, stretch = "lin")
# Cargamos imagen satelital de las condes ----
LC <- brick("data/OLI_LC.tif")
LC
# Color Natural con contraste lineal
plotRGB(LC_ll, r = 4, g = 3, b = 2, stretch = "lin")
# Infrarojo (5,4,3)
plotRGB(LC, r = 5, g = 4, b = 3, stretch = "lin")
# Agricultura (6,5,2)
plotRGB(LC, r = 6, g = 5, b = 2, stretch = "lin")
# Penetración de la Radiación en la Atmósfera (7,6,5)
plotRGB(LC, r = 7, g = 6, b = 5, stretch = "lin")
# Uso del Suelo / Masas de Agua (5,6,4)
plotRGB(LC, r = 5, g = 6, b = 4, stretch = "lin")
# Infrarojo de Onda Corta (7,5,4)
plotRGB(LC, r = 7, g = 5, b = 4, stretch = "lin")
# Análisis de Vegetación (6,5,4)
plotRGB(LC, r = 6, g = 5, b = 4, stretch = "lin")
# Análisis de Vegetación Sana (5,6,2)
plotRGB(LC, r = 5, g = 6, b = 2, stretch = "lin")
# Uso del Suelo / Masas de Agua (5,6,4)
plotRGB(LC, r = 5, g = 6, b = 4, stretch = "lin")
# normalizamos los valores del canal 5 (x-mean)/sd
infrared <- scale(LC[[5]])
# dibujamos el infrarojo
plot(infrared)
hist(infrared)
quantiles(infrared)
quantile(infrared)
# extraemos zonas con infrarojo alto, que aproximan a la vegetacion
vegetacion <- calc(infrared, fun = function(x) ifelse(x <= 3, NA, x))
pal_green <- colorRampPalette(c("green","springgreen4", "darkgreen"))
plot(vegetacion , col = pal_green( 200 ))
# dibujamos el infrarojo
plot(infrared)
plot(vegetacion , col = pal_green( 200 ))
# pasamos pixeles a poligonos
poligonos_infrarojo <- rasterToPolygons(vegetacion, digits = 16) %>% st_as_sf()
plot(poligonos_infrarojo, pal = pal_green)
# veamos que pasa al unirlos
merged_poligonos_infrarojo <- poligonos_infrarojo  %>%
st_union() %>% # unimos vecinos
st_cast("POLYGON")  # aislamos los poligonos resultantes
plot(merged_poligonos_infrarojo, pal = pal_green)
# extraemos los valores del raster original sobre cada poligono resultante y lo guardamos en un df
vegetacion_poly <- data.frame(vegetacion = raster::extract(vegetacion,
st_as_sf(merged_poligonos_infrarojo),
fun=mean))
# le asignamos al df las geometrias de los poligonos
st_geometry(vegetacion_poly) <- st_sfc(merged_poligonos_infrarojo)
# visualizamos
plot(vegetacion_poly, pal = pal_green)
# agregar la frontera de Las Condes
LasCondes <- sf::st_read("data/LasCondes.shp")
plot(LasCondes$geometry)
plot(vegetacion_poly, pal = pal_green, add = TRUE)
# visualizamos en mapa interactivo
mview <- mapview(LasCondes, color = "#05A39B", alpha.region =0)+
viewRGB(LC, r = 4, g = 3, b = 2, na.color = "transparent") +
mapview(vegetacion_poly, na.color = "transparent", col.regions = pal_green)
mview
# guardamos el mapa como pagina html
mapshot(x = mview, url = "mapa_veg.html")
pacman::p_load(tidyverse, rgee, sf, raster)
ee_Initialize(drive = T)
ee_install()
ee_Initialize(drive = T)
ee_check()
ee_clean_pyenv()
ee_install()
ee_Initialize(drive = T)
ee_clean_pyenv()
ee_check()
pacman::p_load(tidyverse, rgee, sf, raster)
ee_Initialize(drive = T)
ee_install()
pacman::p_load(tidyverse, rgee, sf, raster)
ee_Initialize(drive = T)
ee_install()
ee_clean_pyenv()
ee_Initialize(drive = T)
pacman::p_load(tidyverse, rgee, sf, raster)
ee_install()
ee_clean_pyenv()
pacman::p_load(tidyverse, rgee, sf, raster)
ee_Initialize(drive = T)
ee_install()
ee_check()
pacman::p_load(tidyverse, rgee, sf, raster)
ee_Initialize(drive = T)
# defino una region de interes ----
roi <-
c(-70.915374, -33.8464671) %>%  # laguna aculeo
st_point(dim = "XYZ") %>%
st_buffer(dist = 0.1) %>%
sf_as_ee()
# identifico posibles fechas de imagenes del LS8
disponible <- ee$ImageCollection('LANDSAT/LC08/C01/T1_TOA')$
filterDate('2013-07-01','2013-07-10')$
filterBounds(roi)$
filterMetadata('CLOUD_COVER','less_than', 5)
View(disponible)
# ordeno las fechas
df_disponible <- ee_get_date_ic(disponible)%>%
arrange(time_start)
View(df_disponible)
# identifico posibles fechas de imagenes del LS8
disponible <- ee$ImageCollection('LANDSAT/LC08/C01/T1_TOA')$
filterDate('2013-07-01','2014-07-10')$
filterBounds(roi)$
filterMetadata('CLOUD_COVER','less_than', 5)
# ordeno las fechas
df_disponible <- ee_get_date_ic(disponible)%>%
arrange(time_start)
View(df_disponible)
# extraigo la primera
escena <- df_disponible$id[1]
# defino las bandas que me interesa extraer
l8_bands <- ee$Image(escena)$select(c("B1", "B2", "B3", "B4",
"B5", "B6", "B7", "B9"))
# extraigo imagenes satelitales
l8_img <- ee_as_raster(
image = l8_bands,
region = roi$bounds(),
scale = 30)
plotRGB(l8_img, r=4, g=3, b=2, stretch = "lin")
# llamo funciones
source("R/indices.R")
veg <- NVDI(l8_img)
plot(veg)
# listo funciones
funs <- lsf.str()
funs
for(i in 1:length(funs)){
png(file=paste0("Figuras/",funs[i],"_plot.png"), width=500, height=600)
plot(do.call(funs[i], list(l8_img)))
dev.off()
}
# analisis aculeo en el tiempo ----
analisis_aculeo <- function(anio){
disponible <- ee$ImageCollection('LANDSAT/LC08/C01/T1_TOA')$
filterDate(paste0(anio,'-11-01'),paste0(anio,'-11-30'))$
filterBounds(roi)$
filterMetadata('CLOUD_COVER','less_than', 10)
df_disponible <- ee_get_date_ic(disponible)%>%
arrange(time_start)
# extraigo la primera
escena <- df_disponible$id[1]
# defino las bandas que me interesa extraer para el NDWI
l8_bands <- ee$Image(escena)$select(c("B2", "B3", "B4", "B5"))
# B1: Aerosol, B2: Blue, B3: Green, B4: Red
# B5: NIR, B6: SWIR 1, B7: SWIR 2, B9: Cirrus
# extraigo imagenes satelitales
l8_img <- ee_as_raster(
image = l8_bands,
region = roi$bounds(),
scale = 30)
# extraigo valores de agua
agua <- calc(NDWI(l8_img), fun = function(x) ifelse(x <= 0.2, NA, x))
# guardo plot
png(file=paste0("Figuras/aculeo_anio",anio,".png"), width=500, height=600)
plotRGB(l8_img, r=3, g=2, b=1, stretch = "lin")
plot(agua, add = TRUE)
dev.off()
}
analisis_aculeo(2014)
# Cargar Librerias
pacman::p_load(rgdal, rgeos, stars, spatstat, spdep, sf, raster,
spatialreg, tidyverse, gstat, MASS)
# Datos de delitos
violencia <- read_rds("data/casos_violencia.rds")  %>%
st_as_sf()
# Cargar datos censales de nivel educativo en Las Condes a nivel de personas
censo_lc <- readRDS("data/censo_lc.rds") %>%
mutate(poblacion = 1,
CODINE011 = as.character(IDMZ)) %>%
dplyr::select(-IDMZ)
# Calcular poblacion por manzana
poblacion <-
censo_lc %>%
group_by(CODINE011) %>%
summarise(poblacion = sum(poblacion))
# Calcular Nivel Educacional de jefes de hogar por manzana
nived <- censo_lc %>%
filter(DSOST==1) %>%  # Filtar sostenedores
group_by(CODINE011) %>%
summarise(EDUC = mean(EDUC))
# Cargar Poligonos de Manzanas de Las Condes (Censo 2012)
# acoplar con datos de nivel educacional a manzanas
mz_lc <- readRDS("data/MBHT_LC.rds") %>%
st_as_sf() %>%
rename(CODINE011 = ID_MANZ) %>%
left_join(poblacion, by = "CODINE011") %>%
left_join(nived, by = "CODINE011") %>%
st_set_crs("+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") %>%
mutate(area = st_area(.)/10000,
densidad = poblacion/area,
violencia = lengths(st_intersects(geometry, violencia)))
# manzanas en version puntos
mz_point <- mz_lc %>%
st_centroid()
# visualizamos
ggplot() +
geom_sf(data=mz_lc) +
geom_sf(data = violencia)
# Calculo de Hotspots con radios mas y menos extensos de agregacion
# extraigo puntos para la funcion kde2d
pts <- violencia$geometry %>% unlist() %>% matrix(nrow=2) %>% t()
del_hotspots_1 <- kde2d(pts[,1], pts[,2], h = 1500, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.06')
del_hotspots_2 <- kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')
gs <- gstat(formula = lagsar~1, locations = mz_violencia)
rast <- raster(mz_lc, res=30)
idw <- interpolate(rast, gs)
plot(idw, col = viridis::viridis(100), main='Densidad de Delitos KNN')
formMod <- violencia ~ 1
variog_empirico <- variogram(formMod, mz_point)
variog_teorico <- fit.variogram(variog_empirico,
model = vgm(model  = "Exp", nugget = 0.8))
plot(variog_teorico, cutoff = 4300, add=TRUE)
plot(variog_empirico)
# Prediccion tipo Kriging
modelo_krige <- krige(formula = formMod ,
locations = mz_point,
model = variog_teorico,
newdata = mz_point,
debug.level = 0)
ggplot(data=mz_lc, aes(fill=modelo_krige$var1.pred)) +
geom_sf() +
scale_fill_viridis_c()
dataviolencia = mz_point %>%
mutate(violencia = ifelse(is.na(violencia),0,violencia)) %>%
drop_na(densidad)
mz_violencia = mz_lc %>% filter(CODINE011 %in% dataviolencia$CODINE011)
# modelo de regresion convencional
modviol <- lm(violencia ~ log(densidad) + EDUC, data = dataviolencia)
summary(modviol)
moran.test(modviol$residuals, nb) ## Test Moran residuos
## Crear matriz de pesos espaciales
nb <- nb2listw(neighbours = knn2nb(
knn = knearneigh(x = dataviolencia, k = 12)),
style = "W")
#Error espacial
fit.errdurb <- errorsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw = nb, etype="error", method="eigen")
summary(fit.errdurb)
moran.test(fit.errdurb$residuals, nb) ## Test Moran residuos
#Lag espacial
fit.durb <- lagsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw = nb ,type="lag",method="eigen")
summary(fit.durb)
moran.test(fit.durb$residuals, nb)
#Error y Lag espacial
fit.sac <- sacsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw=nb, type="sac", method="eigen")
summary(fit.sac)
moran.test(fit.sac$residuals, nb)
mz_violencia <-
mz_violencia %>%
mutate(reg_lin = predict(modviol),
errsar = fitted(fit.errdurb),
lagsar = fitted(fit.durb),
sacsar = fitted(fit.sac))
library(patchwork)
p1 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=reg_lin)) +
scale_fill_viridis_c()
p2 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=errsar)) +
scale_fill_viridis_c()
p3 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=lagsar)) +
scale_fill_viridis_c()
p4 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=sacsar)) +
scale_fill_viridis_c()
(p1 + p2) / (p3 + p4)
gs <- gstat(formula = violencia~1, locations = mz_lc)
# Datos de delitos
violencia <- read_rds("data/casos_violencia.rds")  %>%
st_as_sf()
# Cargar datos censales de nivel educativo en Las Condes a nivel de personas
censo_lc <- readRDS("data/censo_lc.rds") %>%
mutate(poblacion = 1,
CODINE011 = as.character(IDMZ)) %>%
dplyr::select(-IDMZ)
# Calcular poblacion por manzana
poblacion <-
censo_lc %>%
group_by(CODINE011) %>%
summarise(poblacion = sum(poblacion))
# Calcular Nivel Educacional de jefes de hogar por manzana
nived <- censo_lc %>%
filter(DSOST==1) %>%  # Filtar sostenedores
group_by(CODINE011) %>%
summarise(EDUC = mean(EDUC))
# Cargar Poligonos de Manzanas de Las Condes (Censo 2012)
# acoplar con datos de nivel educacional a manzanas
mz_lc <- readRDS("data/MBHT_LC.rds") %>%
st_as_sf() %>%
rename(CODINE011 = ID_MANZ) %>%
left_join(poblacion, by = "CODINE011") %>%
left_join(nived, by = "CODINE011") %>%
st_set_crs("+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") %>%
mutate(area = st_area(.)/10000,
densidad = poblacion/area,
violencia = lengths(st_intersects(geometry, violencia)))
# manzanas en version puntos
mz_point <- mz_lc %>%
st_centroid()
# visualizamos
ggplot() +
geom_sf(data=mz_lc) +
geom_sf(data = violencia)
# Calculo de Hotspots con radios mas y menos extensos de agregacion
# extraigo puntos para la funcion kde2d
pts <- violencia$geometry %>% unlist() %>% matrix(nrow=2) %>% t()
del_hotspots_1 <- kde2d(pts[,1], pts[,2], h = 1500, n = 100)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.06')
del_hotspots_2 <- kde2d(pts[,1], pts[,2], h = 3000, n = 100)
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')
gs <- gstat(formula = violencia~1, locations = mz_lc)
rast <- raster(mz_lc, res=30)
image(del_hotspots_1, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.06')
image(del_hotspots_2, col = viridis::viridis(100), main='Densidad de Delitos Violentos 0.03')
gs <- gstat(formula = violencia~1, locations = mz_lc)
rast <- raster(mz_lc, res=30)
idw <- interpolate(rast, gs)
plot(idw, col = viridis::viridis(100), main='Densidad de Delitos KNN')
formMod <- violencia ~ 1
variog_empirico <- variogram(formMod, mz_point)
variog_teorico <- fit.variogram(variog_empirico,
model = vgm(model  = "Exp", nugget = 0.8))
plot(variog_teorico, cutoff = 4300, add=TRUE)
plot(variog_empirico)
# Prediccion tipo Kriging
modelo_krige <- krige(formula = formMod ,
locations = mz_point,
model = variog_teorico,
newdata = mz_point,
debug.level = 0)
ggplot(data=mz_lc, aes(fill=modelo_krige$var1.pred)) +
geom_sf() +
scale_fill_viridis_c()
dataviolencia = mz_point %>%
mutate(violencia = ifelse(is.na(violencia),0,violencia)) %>%
drop_na(densidad)
mz_violencia = mz_lc %>% filter(CODINE011 %in% dataviolencia$CODINE011)
# modelo de regresion convencional
modviol <- lm(violencia ~ log(densidad) + EDUC, data = dataviolencia)
summary(modviol)
## Crear matriz de pesos espaciales
nb <- nb2listw(neighbours = knn2nb(
knn = knearneigh(x = dataviolencia, k = 12)),
style = "W")
moran.test(modviol$residuals, nb) ## Test Moran residuos
#Error espacial
fit.errdurb <- errorsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw = nb, etype="error", method="eigen")
summary(fit.errdurb)
moran.test(fit.errdurb$residuals, nb) ## Test Moran residuos
#Lag espacial
fit.durb <- lagsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw = nb ,type="lag",method="eigen")
summary(fit.durb)
moran.test(fit.durb$residuals, nb)
#Error y Lag espacial
fit.sac <- sacsarlm(violencia ~ log(densidad) + EDUC, data = dataviolencia,
listw=nb, type="sac", method="eigen")
summary(fit.sac)
moran.test(fit.sac$residuals, nb)
mz_violencia <-
mz_violencia %>%
mutate(reg_lin = predict(modviol),
errsar = fitted(fit.errdurb),
lagsar = fitted(fit.durb),
sacsar = fitted(fit.sac))
library(patchwork)
p1 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=reg_lin)) +
scale_fill_viridis_c()
p2 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=errsar)) +
scale_fill_viridis_c()
p3 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=lagsar)) +
scale_fill_viridis_c()
p4 <- ggplot(data=mz_violencia) +
geom_sf(aes(fill=sacsar)) +
scale_fill_viridis_c()
(p1 + p2) / (p3 + p4)
